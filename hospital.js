const readline = require('readline'); // Pacote nativo do Node.js para entrada de dados via terminal

// Classe que simula uma fila (FIFO - First In, First Out)
class Fila {
  constructor() {
    this.itens = [];
  }

  enfileirar(elemento) {
    this.itens.push(elemento); // Adiciona o paciente no fim da fila
  }

  desenfileirar() {
    return this.itens.shift(); // Remove o paciente do in√≠cio da fila
  }

  frente() {
    return this.itens[0]; // Retorna o primeiro paciente da fila
  }

  estaVazia() {
    return this.itens.length === 0; // Verifica se a fila est√° vazia
  }

  imprimir() {
    return this.itens.join(', '); // Retorna todos os pacientes da fila como string
  }

  limpar() {
    this.itens = []; // Esvazia a fila
  }
}

// Classe que simula uma pilha (LIFO - Last In, First Out)
class Pilha {
  constructor() {
    this.itens = [];
  }

  empilhar(elemento) {
    this.itens.push(elemento); // Adiciona o paciente no topo da pilha
  }

  imprimir() {
    return this.itens.join(', '); // Retorna todos os pacientes empilhados como string
  }

  buscar(paciente) {
    return this.itens.includes(paciente); // Verifica se o paciente est√° na pilha
  }

  limpar() {
    this.itens = []; // Esvazia a pilha
  }
}

// Cria√ß√£o da interface para entrada e sa√≠da no terminal
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Fun√ß√£o principal que executa a simula√ß√£o
function iniciarSimulacao() {
  const fila = new Fila();     // Instancia a fila de atendimento
  const pilha = new Pilha();   // Instancia a pilha de prontu√°rios

  console.log('üè• Simula√ß√£o de atendimento hospitalar');

  // Fun√ß√£o para iniciar ou reiniciar a simula√ß√£o
  function iniciarCadastroPacientes() {
    fila.limpar(); // Esvazia a fila anterior
    pilha.limpar(); // Esvazia a pilha anterior

    rl.question('Quantos pacientes deseja adicionar? ', (quantidade) => {
      let total = parseInt(quantidade);
      let count = 0;

      // Fun√ß√£o recursiva para cadastrar os pacientes um a um
      function adicionarPaciente() {
        if (count < total) {
          rl.question(`Digite o nome do paciente ${count + 1}: `, (nome) => {
            fila.enfileirar(nome); // Adiciona o nome na fila
            count++;
            adicionarPaciente(); // Chama novamente at√© completar o total
          });
        } else {
          mostrarMenu(); // Ap√≥s adicionar todos, exibe o menu de op√ß√µes
        }
      }

      adicionarPaciente(); // Inicia o processo de adicionar pacientes
    });
  }

  // Menu com as a√ß√µes dispon√≠veis para o usu√°rio
  function mostrarMenu() {
    console.log('\nüìã Menu:');
    console.log('1. Ver pr√≥ximo paciente');
    console.log('2. Atender paciente');
    console.log('3. Ver fila');
    console.log('4. Ver prontu√°rios');
    console.log('5. Buscar paciente em prontu√°rios');
    console.log('6. Reiniciar simula√ß√£o');
    console.log('7. Sair');

    rl.question('Escolha uma op√ß√£o: ', (opcao) => {
      switch (opcao) {
        case '1':
          // Mostra quem ser√° o pr√≥ximo a ser atendido
          console.log('‚û°Ô∏è Pr√≥ximo paciente:', fila.frente() || 'Fila vazia');
          mostrarMenu();
          break;
        case '2':
          // Atende o paciente da frente da fila e armazena na pilha
          if (fila.estaVazia()) {
            console.log('‚ö†Ô∏è Fila vazia. Ningu√©m para atender.');
          } else {
            const atendido = fila.desenfileirar();
            console.log(`‚úÖ Paciente atendido: ${atendido}`);
            pilha.empilhar(atendido);
          }
          mostrarMenu();
          break;
        case '3':
          // Exibe a fila atual de pacientes
          console.log('üìã Fila atual:', fila.imprimir() || 'Vazia');
          mostrarMenu();
          break;
        case '4':
          // Exibe a pilha de prontu√°rios
          console.log('üìÅ Prontu√°rios empilhados:', pilha.imprimir() || 'Nenhum');
          mostrarMenu();
          break;
        case '5':
          // Permite buscar um paciente na pilha de prontu√°rios
          rl.question('Digite o nome do paciente a buscar: ', (nomeBusca) => {
            const encontrado = pilha.buscar(nomeBusca);
            console.log(encontrado
              ? `üîç ${nomeBusca} est√° nos prontu√°rios.`
              : `‚ùå ${nomeBusca} n√£o encontrado nos prontu√°rios.`);
            mostrarMenu();
          });
          break;
        case '6':
          // Reinicia a simula√ß√£o com nova fila e pilha
          console.log('üîÑ Reiniciando simula√ß√£o...\n');
          iniciarCadastroPacientes();
          break;
        case '7':
          // Encerra o programa
          console.log('üèÅ Encerrando simula√ß√£o...');
          rl.close(); // Fecha a interface readline
          break;
        default:
          // Caso o usu√°rio digite uma op√ß√£o inv√°lida
          console.log('‚ùå Op√ß√£o inv√°lida.');
          mostrarMenu();
      }
    });
  }

  iniciarCadastroPacientes(); // Inicia o primeiro ciclo de cadastro
}

iniciarSimulacao(); // Executa a fun√ß√£o principal
